apply plugin: 'war'
apply plugin: 'liberty'

sourceCompatibility = 1.8
targetCompatibility = 1.8

description = 'Microservice :: Group'

configurations{
    // Used for copyDependency
    mongo {}
    keystore {}
}

dependencies {
    testCompile project(':shared-keystore')
    testCompile group: 'org.apache.cxf', name: 'cxf-rt-rs-client', version:'3.1.1'
    testCompile group: 'org.glassfish', name: 'javax.json', version:'1.0.4'
    testCompile group: 'org.springframework', name: 'spring-context', version:'4.3.9.RELEASE'
    providedCompile group: 'javax', name: 'javaee-api', version:'7.0'
    providedCompile group: 'com.ibm.websphere.appserver.api', name: 'com.ibm.websphere.appserver.api.jwt', version:'1.0.16'
    providedCompile group: 'org.eclipse.microprofile.config', name: 'microprofile-config-api', version:'1.0'
    providedCompile group: 'org.eclipse.microprofile.jwt', name: 'microprofile-jwt-auth-api', version:'1.0-RC10'
    libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version:'17.0.0.3'
    compile group: 'org.mongodb', name: 'mongo-java-driver', version:'2.14.3'
    mongo group: 'org.mongodb', name: 'mongo-java-driver', version: '2.14.3'
    keystore project(':shared-keystore')
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:2.1"
    }
}

ext {
    warfileName = 'groupMicroservice'
    wlpServerName = 'groupSever'
}

war {
    archiveName = "${warfileName}.${extension}"
}

liberty {
    server {
        name = wlpServerName
        bootstrapProperties =
            ['app.name':war.archiveName, 'http.port':groupHttpPort, 'https.port':groupHttpsPort, 
            'mongo.port':groupMongoPort, 'mongo.hostname':groupMongoHostname, 'jwt.issuer':jwtIssuer]
    }
}

task url {
    doLast { println groupURL }
}

test {
    group 'Verification'
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-reports/unit")
    exclude '**/test/**'
}

task integrationTest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    reports.html.destination = file("$buildDir/reports/it")
    reports.junitXml.destination = file("$buildDir/test-reports/it")
    include '**/test/**'

    systemProperties = ['liberty.test.group.service.url': groupServiceURL,
                        'mongo.test.hostname': groupMongoHostname,
                        'mongo.test.port': groupMongoPort,
                        'jwt.issuer': jwtIssuer,
                        'javax.net.ssl.keyStorePassword': "secret"]
}

task copyKeystore (type: Copy) {
    configurations.keystore.each {
        from(zipTree(it)) {
            include "keystore.jceks"
        }
    }
    into "${buildDir}/wlp/usr/servers/${wlpServerName}/resources/security"
    outputs.file("${buildDir}/wlp/usr/servers/${wlpServerName}/resources/security/keystore.jceks")
}

task testKeystore(type: Copy) {
    from "${buildDir}/wlp/usr/servers/${wlpServerName}/resources/security"
    into "${buildDir}/resources/test/truststore/"
    outputs.file("${buildDir}/resources/test/truststore/keystore.jceks")
}

task copyDependency (type: Copy) {
    dependsOn 'libertyCreate'
    from configurations.mongo
    rename { "mongo-java-driver.jar" }
    into "${buildDir}/wlp/usr/shared/resources/"
    outputs.file("${buildDir}/wlp/usr/shared/resources/mongo-java-driver.jar")
}

task startDatabase (type: Exec) {
    group 'database'
    description 'Execute the script to start the database.'

    // NOTE: these params are likely to change, especially 'build'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/C', '../run-app/startMongo.bat', 'groupDB', groupMongoPort, 'build', mongoPath
    } else {
        commandLine 'sh', '../run-app/startMongo.sh', 'groupDB', groupMongoPort, 'build', mongoPath
    }
}

task stopDatabase (type: Exec) {
    group 'database'
    description 'Execute the script to stop the database.'
    args = ['groupDB', mongoPath]

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/C', '../run-app/stopMongo.bat', 'groupDB', 'build', mongoPath
    } else {
        commandLine 'sh', '../run-app/stopMongo.sh', 'groupDB', 'build', mongoPath
    }
}

integrationTest.dependsOn 'libertyStart', 'startDatabase', 'testKeystore'
integrationTest.finalizedBy 'libertyStop', 'stopDatabase'
check.dependsOn 'copyDependency'
libertyStart.dependsOn 'copyKeystore'
copyKeystore.dependsOn ':shared-keystore:assemble', 'libertyCreate'