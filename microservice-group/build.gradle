
description = 'Microservice :: Group'

configurations{
    // Used for copyDependency
    mongo {}
    compile.extendsFrom(mongo)
}

dependencies {
    mongo group: 'org.mongodb', name: 'mongo-java-driver', version: '2.14.3'
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:2.1"
    }
}

ext {
    warfileName = 'groupMicroservice'
    wlpServerName = 'groupServer'
}

war {
    archiveName = "${warfileName}.war"
}

liberty {
    server {
        name = wlpServerName
        bootstrapProperties =
            ['app.name':war.archiveName, 'http.port':groupHttpPort, 'https.port':groupHttpsPort, 
            'mongo.port':groupMongoPort, 'mongo.hostname':groupMongoHostname, 'jwt.issuer':jwtIssuer]
    }
}

task url {
    doLast { println groupURL + '/groups'}
}

test {
    group 'Verification'
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-reports/unit")
    exclude '**/test/**'

    // run every time when called
    outputs.upToDateWhen { false }
}

task integrationTest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    reports.html.destination = file("$buildDir/reports/it")
    reports.junitXml.destination = file("$buildDir/test-reports/it")
    include '**/test/**'

    systemProperties = ['liberty.test.group.service.url': groupServiceURL,
                        'mongo.test.hostname': groupMongoHostname,
                        'mongo.test.port': groupMongoPort,
                        'jwt.issuer': jwtIssuer,
                        'javax.net.ssl.keyStorePassword': "secret"]

    // run every time when called
    outputs.upToDateWhen { false }
}

task copyKeystore (type: Copy) {
    configurations.keystore.each {
        from(zipTree(it)) {
            include "keystore.jceks"
        }
    }
    into "$buildDir/wlp/usr/servers/${wlpServerName}/resources/security"
    outputs.file("$buildDir/wlp/usr/servers/${wlpServerName}/resources/security/keystore.jceks")
}

task testKeystore(type: Copy) {
    dependsOn 'copyKeystore'
    from "$buildDir/wlp/usr/servers/${wlpServerName}/resources/security"
    into "$buildDir/resources/test/truststore/"
    outputs.file("$buildDir/resources/test/truststore/keystore.jceks")
}

task copyDependency (type: Copy) {
    dependsOn 'libertyCreate'
    from configurations.mongo
    rename { "mongo-java-driver.jar" }
    into "$buildDir/wlp/usr/shared/resources/"
    outputs.file("$buildDir/wlp/usr/shared/resources/mongo-java-driver.jar")
}

task startDatabase (type: Exec) {
    group 'database'
    workingDir = "${projectDir}"
    description 'Execute the script to start the database.'

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/C', '../run-app/startMongo.bat', 'groupDB', groupMongoPort, 'build', mongoPath
    } else {
        commandLine 'sh', '../run-app/startMongo.sh', 'groupDB', groupMongoPort, 'build', mongoPath
    }
    outputs.file("${buildDir}/groupDB/groupDB.pid")
    ignoreExitValue = true
}

task stopDatabase (type: Exec) {
    group 'database'
    workingDir = "${projectDir}"
    dependsOn 'libertyCreate'
    description 'Execute the script to stop the database.'

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/C', '../run-app/stopMongo.bat', 'groupDB', 'build', mongoPath
    } else {
        commandLine 'sh', '../run-app/stopMongo.sh', 'groupDB', 'build', mongoPath
    }
    ignoreExitValue = true
}

check.dependsOn 'integrationTest'
integrationTest.dependsOn 'libertyStart', 'testKeystore'
integrationTest.finalizedBy 'libertyStop'
libertyStart.dependsOn 'copyKeystore', 'copyDependency', 'startDatabase'
libertyStop.finalizedBy 'stopDatabase'
clean.dependsOn 'libertyStop'
copyKeystore.dependsOn ':shared-keystore:assemble', 'libertyCreate'
