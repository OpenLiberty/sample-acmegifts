import org.ysb33r.gradle.nodejs.tasks.NpmTask

apply plugin: 'war'
apply plugin: 'liberty'
apply plugin: 'org.ysb33r.nodejs.npm'

description = 'Microservice :: Frontend UI'
dependencies {
    providedCompile project(':shared-keystore')
    libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version:'17.0.0.3'
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        // to be removed
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath "gradle.plugin.org.ysb33r.gradle:nodejs-gradle-plugin:0.1"

        // snapshot to removed upon release
        classpath "net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:2.0.2-SNAPSHOT"
    }
}

ext {
    warfileName = 'UIService'
    wlpServerName = 'UIServer'
}

war {
    archiveName = warfileName + '.' + extension
}

nodejs {
    // comes with npm version '5.3.0'
    executable version : '8.3.0'
}

npm {
    homeDirectory "${projectDir}/npm_build"
}

task npmInstall (type: NpmTask) {
    description = 'Run npm install from Gradle.'
    command 'install'
    outputs.dir("{projectDir}/npm_build/node_modules")
}

task cpySrc (type: Copy) {
    from 'src'
    into 'npm_build/src'
    outputs.dir("npm_build/src")
}

task npmBuild(type: NpmTask) {
    description = 'Run npm run build from Gradle.'
    command 'run'
    cmdArgs 'build', '${projectDir}/npm_build'
    dependsOn 'cpySrc', 'npmInstall'
    outputs.dir("${projectDir}/src/main/webapp")
}

task npmLint (type: NpmTask) {
    description = 'Run npm run lint from Gradle.'
    command 'run'
    cmdArgs 'lint'
    dependsOn 'npmBuild'
    // run onlyIf npmBuild is not UP-TO-DATE
    outputs.dir("${projectDir}/src/main/webapp")
}

liberty {
    server {
        name = wlpServerName
        apps = [war]
        configFile = new File("${projectDir}/liberty/config/server.xml")
        bootstrapProperties =
            ['server.http.port':frontendHttpPort, 'server.https.port':frontendHttpsPort, 'application.name':war.archiveName]
        looseApplication = false
    }
}

task url {
    doLast { println frontendURL }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(":front-end-ui:libertyStart")) {
        libertyStart.doLast {
            println ("Application should be running on ${frontendURL}")
        }
    }
}

// tie node into build
build.dependsOn 'npmLint'

// make sure webapp is built
libertyStart.dependsOn 'npmLint'
