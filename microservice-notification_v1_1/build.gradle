apply plugin: 'war'
apply plugin: 'liberty'

sourceCompatibility = 1.8
targetCompatibility = 1.8

description = 'Microservice :: Notification v1_1'

configurations{
    keystore {}
}

dependencies {
    compile group: 'org.twitter4j', name: 'twitter4j-core', version:'4.0.6'
    testCompile project(':shared-keystore')
    testCompile group: 'org.glassfish', name: 'javax.json', version:'1.0.4'
    testCompile group: 'org.apache.cxf', name: 'cxf-rt-rs-client', version:'3.1.1'
    providedCompile group: 'javax', name: 'javaee-api', version:'7.0'
    providedCompile group: 'org.eclipse.microprofile.config', name: 'microprofile-config-api', version:'1.0'
    providedCompile group: 'org.eclipse.microprofile.jwt', name: 'microprofile-jwt-auth-api', version:'1.0-RC10'
    providedCompile group: 'org.eclipse.microprofile.fault.tolerance', name: 'microprofile-fault-tolerance-api', version:'1.0-RC1'
    libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version:'17.0.0.3'
    keystore project(':shared-keystore')
}

buildscript {
    repositories {
        mavenCentral()
        // to be removed
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        // snapshot to removed upon release
        classpath "net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:2.0.1-SNAPSHOT"
    }
}

ext {
    warfileName = 'notificiationMicroservice'
    wlpServerName = 'notificationServer'

    // Optional Microservice Configuration
    notification_v1_1_logfile = new File("${buildDir}/logs/notifications_1_1.log")
    notification_v1_1_fallback_logfile = new File("${buildDir}/logs/notifications_1_1_fallback.log")
}

war {
    archiveName = "${warfileName}.${extension}"
}

liberty {
    server {
        name = wlpServerName
        bootstrapProperties =
            ['log.file':notification_v1_1_logfile, 'fallback.log.file':notification_v1_1_fallback_logfile,
            'twitter.consumer.key':twitterAppConsumerKey, 'twitter.consumer.secret':twitterAppConsumerSecret,
            'twitter.access.token':twitterUserAccessToken, 'twitter.access.secret':twitterUserAccessSecret,
            'http.port':notification_v1_1_HttpPort, 'https.port':notification_v1_1_HttpsPort, 'app.name':war.archiveName, 'jwt.issuer':jwtIssuer]
    }
}

test {
    group 'Verification'
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-reports/unit")
    exclude '**/test/**'
}

task integrationTest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    reports.html.destination = file("$buildDir/reports/it")
    reports.junitXml.destination = file("$buildDir/test-reports/it")
    include '**/test/**'
    
    systemProperties = ['log.file': notification_v1_1_logfile,
                        'fallback.log.file': notification_v1_1_fallback_logfile,
                        'twitter.consumer.key': twitterAppConsumerKey,
                        'twitter.consumer.secret': twitterAppConsumerSecret,
                        'twitter.access.token': twitterUserAccessToken,
                        'twitter.access.secret': twitterUserAccessSecret,
                        'liberty.test.hostname': notification_v1_1_Hostname,
                        'liberty.test.port': notification_v1_1_HttpPort,
                        'jwt.issuer': jwtIssuer,
                        'javax.net.ssl.keyStorePassword': "secret"]
}

task copyKeystore (type: Copy) {
    configurations.keystore.each {
        from(zipTree(it)) {
            include "keystore.jceks"
        }
    }
    into "${buildDir}/wlp/usr/servers/${wlpServerName}/resources/security"
    outputs.file("${buildDir}/wlp/usr/servers/${wlpServerName}/resources/security/keystore.jceks")
}

task testKeystore(type: Copy) {
    from "${buildDir}/wlp/usr/servers/${wlpServerName}/resources/security"
    into "${buildDir}/resources/test/truststore/"
    outputs.file("${buildDir}/resources/test/truststore/keystore.jceks")
}

integrationTest.dependsOn 'libertyStart', 'testKeystore'
integrationTest.finalizedBy 'libertyStop'
libertyStart.dependsOn 'copyKeystore'
copyKeystore.dependsOn ':shared-keystore:assemble', 'libertyCreate'
