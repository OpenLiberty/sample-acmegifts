apply plugin: 'war'
apply plugin: 'liberty'

version = "1.0-SNAPSHOT"
sourceCompatibility = 1.8
targetCompatibility = 1.8

description = 'Microservice :: Occasion'

configurations{
    // Used for copyDependency
    mongo {}
    keystore {}
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-collections4', version:'4.1'
    testCompile project(':shared-keystore')
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile group: 'org.apache.cxf', name: 'cxf-rt-rs-client', version:'3.1.1'
    testCompile group: 'org.springframework', name: 'spring-context', version:'4.3.9.RELEASE'
    testCompile group: 'org.glassfish', name: 'javax.json', version:'1.0.4'
    providedCompile group: 'org.mongodb', name: 'mongo-java-driver', version:'2.14.3'
    providedCompile group: 'javax', name: 'javaee-api', version:'7.0'
    providedCompile group: 'com.ibm.websphere.appserver.api', name: 'com.ibm.websphere.appserver.api.jwt', version:'1.0.16'
    providedCompile group: 'org.eclipse.microprofile.fault.tolerance', name: 'microprofile-fault-tolerance-api', version:'1.0-RC1'
    providedCompile group: 'org.eclipse.microprofile.config', name: 'microprofile-config-api', version:'1.0'
    providedCompile group: 'org.eclipse.microprofile.jwt', name: 'microprofile-jwt-auth-api', version:'1.0-RC10'
    libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version:'17.0.0.3'
    mongo group: 'org.mongodb', name: 'mongo-java-driver', version: '2.14.3'
    keystore project(':shared-keystore')
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:2.1"
    }
}

ext {
    warfileName = "microservice-occasion-" + version
    wlpServerName = "OccasionsServer"
    appName = "${warfileName}.war"
}

liberty {
    server {
        name = wlpServerName
        configFile = new File("${projectDir}/src/main/resources/liberty/config/server.xml")
        bootstrapProperties =
            ['app.name': appName, 'http.port': occasionHttpPort, 'https.port': occasionHttpsPort,
            'mongo.hostname': occasionMongoHostname, 'mongo.port': occasionMongoPort,
            'user.service.hostname': userHostname, 'user.service.port': userHttpsPort,
            'group.service.hostname': groupHostname, 'group.service.port': groupHttpsPort,
            'notification.service.hostname': notificationHostname, 'notification.service.port': notificationHttpPort,
            'notification_1_1.service.hostname': notification_v1_1_Hostname,
            'notification_1_1.service.port': notification_v1_1_HttpPort,
            'jwt.issuer': jwtIssuer]
        looseApplication = false
    }
}

task url {
    doLast { println occasionURL }
}

test {
    group 'Verification'
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-reports/unit")
    outputs.upToDateWhen { false }
    include '**/unit_test/**'


    systemProperties = ['mongo.test.port': occasionMongoPort]
}

task integrationTest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    reports.html.destination = file("$buildDir/reports/it")
    reports.junitXml.destination = file("$buildDir/test-reports/it")
    outputs.upToDateWhen { false }
    include '**/occasions_test/**'

    systemProperties = ['java.util.logging.config.file': "${buildDir}/resources/logging.properties",
                        'liberty.test.occasion.service.url': occasionServiceURL,
                        'mongo.test.hostname': occasionMongoHostname,
                        'mongo.test.port': occasionMongoPort,
                        'jwt.issuer': jwtIssuer,
                        'javax.net.ssl.keyStorePassword': "secret"]
}

task testLoggingProperties(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/resources"
    outputs.file("${buildDir}/resources/logging.properties")
}

task copyKeystore (type: Copy) {
    configurations.keystore.each {
        from(zipTree(it)) {
            include "keystore.jceks"
        }
    }
    into "${buildDir}/wlp/usr/servers/${wlpServerName}/resources/security"
    outputs.file("${buildDir}/wlp/usr/servers/${wlpServerName}/resources/security/keystore.jceks")
}

task testKeystore(type: Copy) {
    from "${buildDir}/wlp/usr/servers/${wlpServerName}/resources/security"
    into "${buildDir}/resources/test/truststore/"
    outputs.file("${buildDir}/resources/test/truststore/keystore.jceks")
}

task copyServerSnippetDependency(type: Copy) {
    doLast {
        println ("Doesn't seem to do anything for now.")
    }
}

task copyDependency (type: Copy) {
    dependsOn 'libertyCreate'
    from configurations.mongo
    rename { "mongo-java-driver.jar" }
    into "${buildDir}/wlp/usr/shared/resources/"
    outputs.file("${buildDir}/wlp/usr/shared/resources/mongo-java-driver.jar")
}

task startDatabase (type: Exec) {
    group 'database'
    description 'Execute the script to start the database.'

    // NOTE: these params are likely to change, especially 'build'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/C', '../run-app/startMongo.bat', 'occasionDB', occasionMongoPort, 'build', mongoPath
    } else {
        commandLine 'sh', '../run-app/startMongo.sh', 'occasionDB', occasionMongoPort, 'build', mongoPath
    }
}

task stopDatabase (type: Exec) {
    group 'database'
    description 'Execute the script to stop the database.'
    args = ['groupDB', mongoPath]

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/C', '../run-app/stopMongo.bat', 'occasionDB', 'build', mongoPath
    } else {
        commandLine 'sh', '../run-app/stopMongo.sh', 'occasionDB', 'build', mongoPath
    }
}

integrationTest.dependsOn 'libertyStart', 'startDatabase', 'testKeystore', 'testLoggingProperties'
integrationTest.finalizedBy 'libertyStop', 'stopDatabase'
check.dependsOn 'copyDependency'
libertyStart.dependsOn 'copyKeystore', 'copyDependency'
copyKeystore.dependsOn ':shared-keystore:assemble', 'libertyCreate'
